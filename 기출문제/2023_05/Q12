전송 오류의 발생에는 감쇠, 지연 왜곡, 잡음 등 다양한 원인이 있으며, 이러한 오류를 검출하고 수정하는 것으로 알려진 대표적인 방식이
(1) 코드 방식이다.
(1) 코드 방식은 하나의 데이터단위에 (4) 비트를 추가하여 오류를 검출하여 교정이 가능한 코드로,
2bit의 오류를 검출할 수 있으며 1bit의 오류를 교정한다. 데잍 ㅓ비트 외에 잉여 비트가 많이 필요하다는 단점이 있다.

(1)코드 방식은 수신측에서 오류를 정정하는 (2)에 해당한다. (2)는 데이터 전송과정에서 오류가 발생하면
송신 측에 재전송을 요구하는 (3)와는 달리 재전송 요구 없이 스스로 수정하기 때문에 연속적인 데이터 전송이 가능하다.

(3)은 (4) 검사, (5) 등을 통해 오류를 검출하고 ARQ로 오류를 제어한다.
(4) 검사는 오류 검사를 위해 데이터 비트 외에 1bit의 체크 비트를 추가하는 것으로 1bit의 오류만 검출할 수 있다.
1의 개수에 따라 짝수 (4)와 홀수 (4)로 나눈드ㅏ.
(5)는 다항식 코드를 사용하여 오류를 검출하는 방식이다. 동기식에서 주로 사용되며 HDLC프레임의 FCS에 사용되는 방식이다.

<보기>
NAK CRC FEC BCD
Parity  Hamming MD5 BEC

답:
1   Hamming
2   FEC
3   NAK
4   Parity
5   CRC

/*
NAK (Negative Acknowledgment)

역할: 오류 발생 시 재전송 요청
사용 맥락: ARQ(Automatic Repeat Request) 방식 중 하나

예시: 데이터 수신 오류 시 "NAK" 전송 → 송신자는 해당 데이터를 다시 보냄

CRC (Cyclic Redundancy Check)
    역할: 오류 검출 (정정은 불가)
    특징: 다항식 계산 기반으로 오류 감지
    사용 예시: 네트워크 프레임의 FCS, 저장장치 데이터 무결성 검사

FEC (Forward Error Correction)
    역할: 수신측에서 스스로 오류 정정
    장점: 재전송 없이 연속된 데이터 전송 가능
    사용 예시: 위성통신, 실시간 스트리밍 등 지연이 치명적인 환경

BCD (Binary-Coded Decimal)
    역할: 숫자 표현 방식, 오류 검출과는 무관
    형식: 십진수 한 자리당 4비트 이진 표현
    예시: 259 → 0010 0101 1001

Parity (패리티 비트)
    역할: 간단한 오류 검출 (1bit까지)
    유형: 짝수 패리티(Even), 홀수 패리티(Odd)
    한계: 짝수 개의 비트 오류는 검출 못함

Hamming (해밍 코드)
    역할: 오류 검출 + 정정 (1bit 오류 정정, 2bit 오류 검출)
    특징: 데이터에 패리티 비트 여러 개 추가
    사용 예시: 메모리 오류 정정(ECC RAM 등)

MD5 (Message Digest Algorithm 5)
    역할: 해시 함수, 오류 검출 목적 아님
    용도: 무결성 검사, 보안적 해시값 생성
    한계: 충돌 취약점 존재 → 보안용으로는 현재는 잘 안 씀

BEC (Binary Erasure Channel)
    역할: 정보이론에서의 이론적 통신 모델
    설명: 비트가 손실됐는지는 알 수 있지만, 어떤 값이었는지는 모름
    용도: 코드 설계나 채널 모델 연구에 사용

*/

