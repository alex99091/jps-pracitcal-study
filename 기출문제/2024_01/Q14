public class Main {
    public static void main(String[] args) {
        B a = new D();
        D b = new D();
        System.out.print(a.getX() + a.x + b.getX() + b.x);
    }
}

class B {
    int x = 3;
    int getX() {
        return x * 2;
    }
}

class D extend B {
    int x = 7;
    int getX() {
        return x *3;
    }
}

내 풀이는

일단 B a = new D() 에서 생성자는 new D(); class D 인스턴스를 생성한거지
그리고 마찬가지로 D b = new D()도 class D 인스턴스를 생성한거야.
결국 class B는 extend하기위해서 사용한거지 사용되지 않음.
따라서 
System.out.print(a.getX() + a.x + b.getX() + b.x);

에서 a.getX() = 21, a.x = 7 b.getX() = 21, b.x = 7
해서 답이 56이야 맞니?

틀림

B a = new D();
D b = new D();
System.out.print(a.getX() + a.x + b.getX() + b.x);

B a = new D(); 해석
a는 B 타입의 참조 변수이지만, 실제로는 D 클래스의 인스턴스를 생성.

메서드 호출(a.getX()) 시, 객체의 타입(D) 기준으로 오버라이딩된 메서드가 호출된다.

멤버 변수(a.x)는 참조 타입(B) 기준으로 결정된다.

D b = new D(); 해석
b는 D 타입의 참조 변수로 D 클래스의 인스턴스를 생성.

메서드 호출(b.getX()) 시, 객체의 타입(D) 기준으로 메서드가 호출된다.


a.getX() = 21    // D의 getX() 호출, x = 7 → 7 * 3 = 21
a.x = 3          // B의 x 사용 (참조 타입 기준), x = 3
b.getX() = 21    // D의 getX() 호출, x = 7 → 7 * 3 = 21
b.x = 7          // D의 x 사용 (객체 타입 기준), x = 7

결과 = 21 + 3 + 21 + 7 = 52