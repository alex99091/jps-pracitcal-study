class Printer {
    void print(Integer a) {
        System.out.print("A" + a);  // Integer 타입에 해당하면 "A" + 값 출력
    }

    void print(Object a) {
        System.out.print("B" + a);  // Object 타입에 해당하면 "B" + 값 출력
    }

    void print(Number a) {
        System.out.print("C" + a);  // Number 타입에 해당하면 "C" + 값 출력
    }
}

public class Main {
    public static void main(String[] args) {
        new Collection<>(0).print();
    }

    public static class Collection<T> {
        T value;
        public Collection(T t) {
            value = t;
        }

        public void print() {
            new Printer().print(value);  // Collection의 value를 Printer에 전달
        }
    }
}


정리해보면:

**Collection<T>**는 제네릭 클래스로 선언되었고, **T**는 타입 매개변수야.

new Collection<>(0)에서 0은 기본적으로 int 타입이고, **Integer**로 자동 박싱된다.

내부적으로 T는 Integer 타입으로 설정되지만, **제네릭 클래스에서는 타입이 컴파일 타임에 결정되고, 그 후에 타입 추론에 의해 메서드가 결정될 때 실제 객체 타입이 아닌, **제네릭 타입 Object**로 간주될 수 있어.

그래서 **Printer**의 print() 메서드가 호출될 때, 가장 일반적인 타입인 **Object**를 사용한 메서드가 선택되면서 "B"가 출력되는 거야.

결론:
Collection<T>에서 T는 Integer로 결정되지만, 외부에서 보면 Object 타입이 우선 적용되므로 **print(Object a)**가 호출된다.

따라서 **B0**가 출력되는 거지! 😎

핵심:
제네릭 타입을 사용하면 내부적으로 T가 특정 타입으로 결정되지만, 호출 시에는 실제 타입이 아닌 일반적인 Object 타입이 우선 고려될 수 있다는 점!

