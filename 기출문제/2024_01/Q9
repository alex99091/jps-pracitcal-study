화이트 박스 테스트의 검증 기준에 대한 각 번호에 해당하는 용어를 <보기>에서 찾아 쓰시오
ㄱ. 선택
ㄴ. 경로
ㄷ. 조건
ㄹ. 분기
ㅁ. 함수
ㅂ. 문장
ㅅ. 루프

1. 소스 코드의 모든 구문이 한번 이상 수행되도록 테스트 케이스를 설계한다.
2. 소스 코드의 모든 조건문에 대한 조건식의 결과가 True인 경우와 False인 경우가 한번 이상 수행되도록 테스트 케이스를 설계한다.
3. 소스 코드의 조건문에 포함된 개별 조건식의 결과가 True인 경우와 False인 경우가 한번 이상 수행되도록 테스트 케이스를 설계한다.

1. ㅂ. 문장
2. ㄹ. 분기
3. ㄷ. 조건


ㄱ. 선택 (Decision)
- if, switch 등의 조건문에서 어떤 분기를 "선택"했는지 확인하는 테스트
- 실제론 '분기(Branch)'와 비슷하게 쓰임

ㄴ. 경로 (Path)
- 프로그램의 시작부터 끝까지 가는 **모든 실행 경로**를 테스트
- 가장 포괄적이고 테스트 케이스가 폭발적으로 늘어날 수 있음

ㄷ. 조건 (Condition)
- 조건문 안에 있는 **각 개별 조건**이 true/false가 되도록 테스트
- 예: if (A && B) → A와 B 각각 true/false 되는 경우 모두 체크

ㄹ. 분기 (Branch)
- 조건문이 **true, false** 양쪽으로 분기되었는지를 테스트
- 예: if (x > 0) → true로 가는 경우 + false로 가는 경우

ㅁ. 함수 (Function)
- 각 함수(모듈)가 **정상 동작하는지** 테스트
- 보통 단위 테스트(Unit Test) 개념과 연관

ㅂ. 문장 (Statement)
- 코드의 **모든 문장(한 줄씩)**이 최소 한 번은 실행되도록 테스트
- 가장 기본적인 수준

ㅅ. 루프 (Loop)
- for, while 같은 반복문이 **0회, 1회, 여러 회** 도는지 확인
- 반복문 특성에 따라 예외 발생 가능성도 체크



### 🧠 표로 간단 정리

| 기호 | 이름     | 테스트 핵심                              |
|------|----------|-------------------------------------------|
| ㄱ   | 선택     | 조건식에서 어떤 분기를 선택했는지         |
| ㄴ   | 경로     | 가능한 모든 실행 흐름 (경로)를 테스트      |
| ㄷ   | 조건     | 조건문 안 개별 조건 true/false 모두 수행 |
| ㄹ   | 분기     | 조건문의 true / false 양쪽 모두 수행      |
| ㅁ   | 함수     | 개별 함수(모듈)의 정상 동작 여부 테스트   |
| ㅂ   | 문장     | 모든 코드 한 줄씩 최소 1번 실행           |
| ㅅ   | 루프     | 반복문이 0, 1, 여러 번 도는지 확인        |

