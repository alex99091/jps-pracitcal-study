다음 설명에 해당하는 디자인패턴은?
- 구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관, 의존하는 객체들의 그릅으로 생성하여 추상적으로 표현
- 키트 패ㄴ턴이라고도 불린다.
- 연관된 서브 클래스를 묶어 한번에 교체가능

Abstract Factory

    [생성(Creational) 패턴]
    - 객체 생성 과정을 추상화하여 유연하고 재사용 가능한 객체 생성을 지원

    1. Singleton      : 하나의 인스턴스만 생성하여 전역적으로 사용
    2. Factory Method : 객체 생성을 서브클래스에 위임
    3. Abstract Factory : 관련 객체들을 그룹으로 생성
    4. Builder        : 복잡한 객체를 단계별로 생성
    5. Prototype      : 기존 객체를 복사(clone)해서 생성

    [구조(Structural) 패턴]
    - 클래스나 객체를 조합하여 더 큰 구조를 만들되, 유연성과 확장성을 유지

    1. Adapter        : 인터페이스 호환 안 되는 클래스끼리 연결
    2. Bridge         : 구현과 추상을 분리하여 독립적으로 확장
    3. Composite      : 트리 구조 표현, 전체와 부분을 동일하게 처리
    4. Decorator      : 객체에 기능을 동적으로 추가
    5. Facade         : 복잡한 서브시스템에 단순 인터페이스 제공
    6. Flyweight      : 공유를 통해 메모리 절약
    7. Proxy          : 대리 객체를 통해 접근 제어

    [행위(Behavioral) 패턴]
    - 객체 간의 책임 분산과 상호작용을 정의

    1. Chain of Responsibility : 요청을 처리할 수 있는 객체에게 순차 전달
    2. Command        : 요청을 객체로 캡슐화하여 실행 취소/재실행 지원
    3. Interpreter    : 문법 규칙을 클래스로 표현하고 해석
    4. Iterator       : 컬렉션 순회 방법을 캡슐화
    5. Mediator       : 객체 간 직접 통신 대신 중재자 객체 사용
    6. Memento        : 객체 상태 저장 및 복원
    7. Observer       : 한 객체 상태 변화 → 의존 객체들에게 알림
    8. State          : 상태에 따라 객체 행동 변경
    9. Strategy       : 알고리즘을 캡슐화하여 교체 가능
    10. Template Method : 알고리즘 뼈대를 정의하고, 세부는 하위 클래스에 위임
    11. Visitor       : 구조 변경 없이 기능 추가 가능
