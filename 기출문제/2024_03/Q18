class firstArea {
    int x, y;
    public firstArea(int x, int y) {
        this.x = x;
        this.y = y;
    }
    public void print() {
        System.out.println(x+y);
    }
}

class secondArea extends firstArea {
    int bb = 3;
    public secondArea(int i) {
        super(i, i+1);
    }
    public void print() {
        System.out.println(bb*bb);
    }
}

public class Main {
    public static void main(String[] args) {
        firstArea st = new secondArea(10);
        st.print();
    }
}

/*
풀이 secondArea(10) -> int = 10; super (10, 11);
firstArea st = (10,11)
st.print() 하면 자식이 부모의 print 인터페이스를 재정의하여 secondArea.print() 가 실행 = 3*3 = 9;
답: 9

개선된 풀이:
1. secondArea 객체 생성: secondArea(10) 호출 -> i = 10
2. 부모 클래스 생성자 호출: super(10, 11) -> firstArea의 x = 10, y = 11 초기화
3. secondArea 객체 생성 완료: bb = 3으로 초기화
4. 다형성: firstArea 타입의 참조 변수 st가 secondArea 객체를 가리킴
5. 메서드 오버라이딩: st.print() 호출 시, secondArea의 print() 메서드 실행 (부모 클래스의 print() 메서드 대신)
6. 결과 출력: secondArea의 print() 메서드에서 bb * bb (3 * 3 = 9) 계산 후 출력
답: 9

*/