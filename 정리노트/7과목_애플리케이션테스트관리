파레토 법칙(Pareto Principle)
    - 애플리케이션 20%에서 전체 결함의 80%가 발견된다는 법칙

살충제 페러독스
    - 동일한 테스트 케이스로 동일한 테스트를 반복하면 더이상 결함이 발견되지 않는 현상

오류-부재의궤변
    - 소프트웨어의 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면
      소프트웨어 품질이 높다고 말할 수 없는 것

정적 테스트
    - 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석하는 테스트
    - 워크스루, 인스팩션, 코드 검사

동적 테스트
    - 프로그램을 실행하여 오류를 찾는 테스트
    - 블랙박스 테스트, 화이트박스 테스트

화이트박스 테스트
    ㄱ. 기초경로 검사: 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정 할 수 있게 해주는 테스트 기법
    ㄴ. 제어구조 검사
        조건 검사: 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
        루프 검사: 반복 구조에 초점을 맞춰 실시
        데이터 흐름 검사: 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

    ㄷ. 검증 기준
        문장(Statement) - 소스 코드의 모든 구문이 한번 이상 수행되도록 테스트 케이스 설계
        결정(Decision) - 소스 코드의 모든 조건문에 대해 True/False인 경우가 한번 이상 수행되도록 설계(= 분기 검증 기준)
        조건(Condition) - 소스 코드의 조건문에 포함된 개별 조건식의 결과가 True/False인 경우가 한번 이상 수행
        조건/결정(Condition/Decision) - 결정 검증/조건 검증기준을 모두 만족하는 설계로
                                      True/False인 경우에 따라 입력 데이터를 구분하는 테스트 케이스
        변경조건/결정검증(Modified Condition/Decision) 
            - 개별 조건식이 다른 개별 조건식의 영향을 받지 않고 전체 조건식의 결과에 독립적으로 영향을 주도록 테스트케이스 설계
        다중조건 검증기준(Multiple Condition Coverage)
            - 소스 코드의 조건문에 포함된 모든 개별 조건식의 모든 조합을 고려하도록 설계

블랙박스 테스트
    - 각 기능이 완전히 동작되는것을 입증하는 테스트로, 기능 테스트라고도 함
    ㄱ. 동치분할검사(Equivalence Partitioning Testing)
        - 입력 조건에 타당한 입력자료와 타당하지 않은 입력 자료의 개수를 균등하게 하여 테스트 케이슬르 정하여 출력되는지 확인하는 기법
    ㄴ. 경계값 분석(Boundary Value Analysis)
        - 입력 조건의 중간값보다 경계값에서 오류가 발생될 확률이 높다는 점을 이용하여 경게값을 테스트 케이스로 선정하여 검사
    ㄷ. 원인-효과 그래프 검사(Cause-Effect Graphing Testing)
        - 입력 데이터 간의 관계와 출력에 영향을 미치는 상황
    ㄹ. 오류예측검사(Comparison Testing)
        - 과거의 경험/확인자의 감각으로 테스트하는 기법
    ㅁ. 비교검사(Comparison Testing)
        - 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트하는 기법

소프트웨어 개발 단계에 따른 애플리케이션 테스트 분류
    - V-모델
        ㄱ. 요구사항   -> 분석      -> 설계      -> 구현
        ㄴ. 인수테스트 <- 시스템테스트 <- 통합테스트 <- 단위테스트

단위테스트
    - 모듈이나 컴포넌트에 초점을 맞춰 테스트

통합테스트
    - 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트를 의미
    ㄱ. 비점진적 통합 방식
        - 단계적으로 통합하는 절차없이 모든 모듈이 결합되어 있는 프로그램 전체 테스트
    ㄴ. 점진적 통합 방식
        - 모듈 단위로 단계적으로 통합/테스트 하는 방법

인수테스트
    - 사용자의 요구사항을 충족하는지에 중점을 두고 테스트
        ㄱ. 알파테스트: 사용자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법
        ㄴ. 베타테스트: 최종사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법

하향식 통합 테스트
    - 상위모듈에서 하위모듈 방향으로 통합하면서 테스트
    - 스텁(Stub): 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구

상향식 통합 테스트
    -하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트
    - 테스트 드라이버: 테스트 대상의 하위 모듈을 호출하고 파라미터 전달, 모듈테스트 수행후 결과 도출

회귀 테스트
    - 통합 테스트로 인해 번경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트

테스트오라클
    - 테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참값을 대입하여 비교하는 기법
    ㄱ. 참오라클: 모든 테스트케이스의 입력값에 대한 결과를 제공하는 오라클
    ㄴ. 샘플링오라클: 몇몇 케이스의 입력값에 대해서만 기대하는 결과를 제공하는 오라클
    ㄷ. 추정오라클: 특정 케이스에 대해서만 값을 제공하고 나머지는 추정으로 처리하는 오라클
    ㄹ. 일관성검사 오라클: 테스트 케이스 수행 전/후의 결과 값이 동일한지 확인하는 오라클

성능측정지표
    ㄱ. 처리량
    ㄴ. 응답시간
    ㄷ. 경과시간
    ㄹ. 자원사용률

순환복잡도
    - 논리적인 복잡도를 측정하기 위한 소프트웨어의 척도
    - V(G) = E - N + 2 (E: 화살표의 수, N은 노드의 수)