스키마(Schema)
    - 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술

    ㄱ. 외부스키마
        - 사용자나 응용 프로그래머가 각 개인의 입장에서 필요하는 데이터베이스의 논리적 구조를 정의한 것
    ㄴ. 개념 스키마
        - 데이터베이스의 전체적인 논리적 구조 (하나만 존재)
    ㄷ. 내부 스키마
        - 물리적 저장장치의 입장에서 본 데이터베이스 구조

개념적 설계
    - 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정

논리적 설계
    - 현실 실세계에 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료구조로 변환시키는 과정

물리적 설계
    - 논리적 설계에서 논리적 구조로 표현된 데이터를 물리적 구조의 데이터로 변환하는 과정

데이터 모델
    - 현실 세계의 정보를 단순화, 추상화 하여 체계적으로 표현한 개념적 모형
    ㄱ. 구조: 데이터 구조 및 정적 성질 표현
    ㄴ. 연산: 실제 데이터를 처리하는 작업 DB조작 기본도구
    ㄷ. 제약조건: DB에 저장되는 데이터의 논리적 제약조건

튜플
    - 릴레이션을 구성하는 각각의 행을 의미
    - 튜플의 수 = 카디널리티

속성
    - 데이터베이스를 구성하는 가장 작은 논리적 단위
    - 속성의 수 = 디그리

도메인
    - 하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자값들의 집합

슈퍼키
    - 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 유일성은 만족하지만, 최소성은 만족하지못한다.

외래키
    - 다른 릴레이션의 기본키를 참조하느 속성 또는 속성들의 집합을 의미한다.

대체키
    - 후보키가 둘 이상 일 때 기본키를 제외한 나머지 후보키를 의미한다.

후보키
    - 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로, 유일성과 최소성을 모두 만족시켜야한다.

기본키
    - 릴레이션에서 각 튜플(행)을 유일하게 식별할 수 있는 속성 또는 속성들의 집합이다.

필드키
    - 필드키는 키 후보의 속성 중에 일부 속성들이 유일성을 만족하는 키들이다. 하지만 최소성을 만족하지 못한다.

무결성
    - 데이터베이스에 저장된 데이터값과 실제값이 일치하는 정확성을 의미
    ㄱ. 개체무결성: 기본키는 Null이나 중복 값을 가질 수 없음
    ㄴ. 참조무결성: 외래키는 Null이거나 참조 릴레이션의 기본키값과 동일해야함.

관계대수
    - 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해 어떻게 유도하는가를 기술하는 절차적 언어
    ㄱ. 합집합: 두 릴레이션에 존재하는 튜플의 합
    ㄴ. 교집합: 두 릴레이션에 존재하는 교집합
    ㄷ. 차집합: 두릴레이션에 존재하는 튜플의 차집합
    ㄹ. 교차곱: 두 릴레이션에 있는 튜플의 순서쌍

이상
    - Anomaly란 DB내의 데이터들이 불필요하게 중복되어 릴레이션 조작 시 예기치 않게 발생하는 곤란한 현상을 의미
    ㄱ. 삽입이상: 테이블에 데이터를 삽입할때 원치않는 갑들로 인해 삽입할 수 없게되는 현상
    ㄴ. 삭제이상: 테이블에서 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제
    ㄷ. 갱신이상: 테이블에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성이 생기는 현상

정규화
    - 테이블의 속성들이 상호종속적인 관계를 갖는 특성을 이용하여 테이블을 무손실 분해하는 과정

제1정규형
    - 테이블 R에 속한 모든 속성의 도메인이 원자값으로만 되어 있는 정규형

제2정규형
    - 제2정규형은 테이블R이 제1정규형이고, 기본키가 아닌 모든 속성이 기본키에 대해 완전 함수적 종속을 만족하는 정규형

제3정규형
    - 제3정규형은 테이블R이 제2정규형이고 기본키가 아닌 모든 속성이 기본키에 대해 이행적 함수적 종속을 만족하지 않는 정규형

BCNF
    - 테이블 R에서 모든 결정자가 후보키인 정규형

제4정규형
    - 다중값 종속이 존재할 경우 R의 모든 속성이 A에 함수적 종속관계를 만족하는 정규형

제5정규형
    - 테이블R의 모든 조인 종속이 R의 후보키를 통해서만 성립되는 정규형

반정규화
    - 정규화된 데이터 모델을 의도적으로 통합, 중복, 분리하여 정규화 원칙을 위배하는 행외.

시스템 카탈로그
    - 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스.
    - 카탈로그들이 생성되면 데이터사전에 저장되어 좁은 의미로는 카탈로그를 데이터사전이라고함.

트랜잭션의 특성
    ㄱ.원자성: DB에 모두 커밋 또는 롤백되어야함
    ㄴ.일관성: 언제나 일관성 있는 데이터베이스 상태로 변환
    ㄷ.독립성: 둘 이상의 트랜잭션이 병행 실행디ㅗ는 경우, 어느 하나의 트랜잭션중 다른 트랜잭션이 끼어들 수 없음.
    ㄹ.영속성: 성공에 완료된 트랜잭션은 영구적으로 반영됨/

인덱스
    - 데이터 레코드를 빠르게 접근하기 위해 <키 값, 포인터> 쌍으로 구성되는 데이터구조

뷰
    - 사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위한 기본 테이블로부터 유도된 가상 테이블

파티션의 종류
    ㄱ.범위분할: 지정한 열의 값을 기준으로 분할 ex)일별, 월별, 분기별
    ㄴ.해시분할: 해쉬 함수를 적용한 값에 ㄸ따라 데이터를 분할 ex)고객번호, 주민번호 등
    ㄷ.조합분할: 범위분할로 분할한 다음 해시함수를 적용하여 다시 분할

분산DB의 목표
    ㄱ. 위치투명성: 엑세스한 실제 위치를 알 필요없이 논리명으로 엑세스 가능
    ㄴ. 중복투명성: 중복이 있더라도 하나의데이터만 존재하는것처럼 작업 수행
    ㄷ. 병행투명성: 분산DB와 관련된 다수의 트랜잭션들이 동시에 영향받지 않음
    ㄹ. 장애투명성: 컴퓨터 장애에도 불구하고 트랜잭션을 정확히 처리.

RTO(Recovery Time Objective)
    - 목표복구시간: 복구되어 가동될때까지 소요시간 의미

RPO(Recovery Point Objective)
    - 목표복구시점: 비상사태 또는 업무중단 시점으로부터 데이터를 복구할 수있는 기준점

DAC(Discretionary Access Control)
    - 데이터를 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식

MAC(Mandatory Access Control)
    - 주체와 객체의 등급일 비교하여 접근 권한을 부여

RBAC(Role Based Access Control)
    - 사용자의 역할에 따라 접근 권한 부여

DAS(Direct Attached Storage)
    - 서버와 저장장치를 전용 케이블로 직접 연결하는 방식

SAN(Storage Area Network)
    -DAS의 빠른처리와 NAS의 파일공유를 혼합하여
     서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성하는 방식
    
자료구조 분류
    - 선형구조: 배열, 선형리스트, 스택, 큐, 데크
        ㄱ. 스택: 리스트의 한족 끝으로만 자료의 삽입,삭제가 이뤄지는 자료구조
                LIFO
        
    - 비선형구조: 그래프, 노드
        ㄱ. 방향/무방향 그래프의 최대 간선 수
            방향 그래프: n(n-1)
            무방향 그래프: n(n-1)/2
            ex) 정점이 4개일 때 
            A - B 무방향 그래프: 4(4-1)/2 = 6
            | X | 방향 그래프: 4(4-1) = 12
            C - D

        ㄴ. 노드: 트리의 기본 요소로서 자료항목+다른가지를 합친것
          근노드: 트리의 맨 이ㅜ에있는 노드
          디그리: 각 노드에서 뻗어나온 가지의 수
         단말노드: 자식이 하나도 없는 노드, 즉 Degree가 0인 노드

Preorder 운행법
    - Root -> Left -> Right 순으로 운행하며 노드를 찾아가는 방법

Inorder 운행법
    - Left -> Root -> Right 순으로 운행하며 노드를 찾아가는 방법

Postorder 운행법
    - Left -> Right -> Root 순으로 운행하며 노드를 찾아가는 방법

삽입정렬
    - 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬하는 방식

선택정렬
    - 최소값을 찾아 첫번째 레코드 위치에 놓고, 다시 최소값을 찾아 정렬하는 반복정렬 방식

버블정렬
    - 인접한 두개의 레코드 키값을 비교하여 서로 교환하는 방식

퀵정렬
    - 키를 기준으로 작은값은 왼쪽 큰값은 오른/쪽 서브파일에 분해시키는 과정을 반복하는 정렬방식
    