나선형 모형
    - 나선형 모형(Spiral Model, 점진적 모형)은 나선을 따라 돌듯이 
      여러번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 모형.
    - 보햄(Boehm)이 제안.
    - 계획수립 -> 위험분석 -> 개발 및 검증 -> 고객평가의 단계를 반복

폭포수 모형
    - 폭포수 모형(Waterfall Model)은 이전 단계로 돌아 갈 수 없다는 전제 하에
      각 단계를 확실히 매듭짓고 그 결과를 철저하게 검토하여 승인 과정을 거친 후에 다음 단계를 진행하는 개발 방법론.
    - 가장 오래되고 가장 폭넓게 사용된 전통적인 소프트웨어 생명 주기 모형.
    - 고전적 생명 주기 모형이라고도 함.

애자일 모형
    - 애자일(Agile)은 '민첩한', '기민한' 이라는 의미로, 고객의 요구사항 변화에 유연하게
      대응 할 수 있도록 일정한 주기를 반복하면서 개발하는 모형.
    - 어느 특정 개발 방법론이 아니라 좋은 것을 빠르고 낭비없게 만들기 위해 고객과의 소통에
      초점을 맞춘 방법론을 통칭.

XP(eXtreme Programming)
    - 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을
      극대화하여 개발 생산성을 향상시키는 방법
    - 짧고 반복적인 개발주기, 단순한 설계 고객의 적극적인 참여를 통해 소프트웨어를 빠르게 개발하는 것
    - XP의 핵심가치
        ㄱ. 의사소통
        ㄴ. 단순성
        ㄷ. 용기
        ㄹ. 존중
        ㅁ. 피드백 

    - XP의 주요 실천방법
        ㄱ. Pair programming(짝 프로그래밍)
            - 다른사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눔
        ㄴ. Collective Ownership(공동 코드 소유)
            - 개발 코드에 대한 권한과 책임을 공동으로 소유
        ㄷ. Test-Driven Development(테스트 주도 개발)
            - 테스트 케이스를 먼저 작성하므로 무엇을 해야할지 정확히 파악.
            - 자동화된 테스트 도구 (구조, 프레임워크) 사용
        ㄹ. Whole Team(전체 팀)
            - 개발에 참여하는 모든 구성원들은 각자 역할이 있고, 역할에 대한 책임을 가짐.
        ㅁ. Continuous Integeration(계속적인 통합)
            - 모듈 단위로 나누어 개발된 코드를 하나의 작업이 마무리 될때마다 지속적 통합.
        ㅂ. Small Releases(소규모 릴리즈)
            - 릴리즈 시간을 짧게 반복. 고객의 요구 변화에 신속히 대응

기능 요구사항
    - 시스템이 무엇을 하는지, 어떤 기능을 하는지 등의 기능/수행과 관련된 요구 사항
    - 입력/출력으로 무엇이 포함되고 어떤 데이터를 저장/연산 하거나
    - 시스템이 반드시 수행해야하는 기능/사용자가 제공받기 원하는 기능 등

비기능 요구사항
    - 품질이나 제약사항과 관련된 요구사항
    - 시스템 장비 구성, 성능, 인터페이스, 데이터 구축, 테스트 요구, 보안 품질 등.

요구사항 분석
    - 개발의 실질적 첫 단계로 사용자의 요구사항을 이해/문서화하는 활동

자료흐름도의 구성요소
    ㄱ. 프로세스
        - 자료를 변환하는 시스템의 한 부분(처리과장)을 나타내며, 처리기능, 변환 버블이라고도 함.
    ㄴ. 자료 흐름
        - 자료의 이동(흐름)이나 연관관계를 나타냄.
    ㄷ. 자료 저장소
        - 시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄.
    ㄹ. 단말
        - 시스템과 교신하는 외부 개체로 입력데이터가 만들어지고 출력데이터를 받음.

HIPO(Hierarchy Input Process Output)
    - 시스템 분석/설계 또는 문서화에 사용되는 기법
      시스템 실행 과정인 입력,처리, 출력의 기능을 표현
    - 하향식 소프트웨어 개발을 위한 문서화 도구

UML 관계 정리표
    ㄱ. 일반화관계
        - 하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계
    ㄴ. 집합관계
        - 하나의 사물이 다른 사물에 포함되어 있는 관계
    ㄷ. 의존관계
        - 서로에게 영향을 주는 짧은 시간동안만 연관을 유지하는 관계
    ㄹ. 집합관계
        - 하나의 사물이 다른 사물에 포함되어 있는 관계이나 독립적으로 존재 가능
    ㅁ. 포함관계
        - 하나의 사물이 다른 사물에 포함되어 있는 관계이나, 생명주기를 공유. 삭제시 같이 사라짐
    
    기호요약
    ㄱ. 일반화: 빈 삼각형 화살표  (▷) + 실선 [------▷]
    ㄴ. 집합: 하얀색 다이아몬드 (◇) + 실선 [------◇]
    ㄷ. 포함: 검정 다이아몬드 (■) + 실선 [-----■]
    ㄹ. 연관: 빈 화살표 + 실선 [-------->]
    ㅁ. 의존: 점선 + 화살표 [- - - - >]

    관계 강도 순
    일반화 > 포함 > 집합 > 연관 > 의존

구조다이어그램
    - 클래스 다이어그램: 클래스가 가지는 속성 관계
        ㄱ. 클래스(클래스명, 속성, 오퍼레이션)
        ㄴ. 제약조건(속성에 대한 조건이나 오퍼레이션 수행 전후에 조건

    - 객체 다이어그램: 클래스에 속한 객체 즉 인스턴스의 관계 표현 
                   럼바우 객체지향 분석기법에서 객체 모델링에 활용
    - 컴포넌트 다이어그램: 실제 구현모듈 컴포넌트 간의 관계나 인터페이스 표현, 구현단계에서 사용
    - 배치 다이어그램: 결과물, 프로세스, 컴포넌트 등 물리적 요소의 위치를 표현, 구현단계에서 사용
    - 복합체 구조 다이어그램: 클래스나 컴포넌트가 복합 구조를 갖는 경우 내부 구조 표현
    
    - 패키지 다이어그램: 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지 의존 관계 표현

행위다이어그램
    - 유스케이스 다이어그램: 시스템의 기능을 사용자 관점에서 표현
        ㄱ. 시스템/시스템범위: 세스템 내부의 유스케이스를 사각형으로 묶어 시스템 범위를 표현
        ㄴ. 엑터: 시스템과 상호작용하는 모든 외부요소. 사람이나 외부요소 표현
                주액터: 시스템사용자(사람)), 부액터: 외부시스템(조직, 기관)
        ㄷ. 유스케이스: 서비스나 기능 표현
        ㄹ. 관계: 포함 <<include>>, 확장 <<extends>>, 일반화

    - 순차 다이어그램: 상호작용하는 시스템이나 객체들이 주고받는 메시지 표현
        ㄱ. 액터: 서비스를 요청하는 외부요소, 사람/외부시스템
        ㄴ. 객체: 메시지를 주고받는 주체
        ㄷ. 생명선: 객체가 메모레이 존재하는 시간
        ㄹ. 객체소멸이 표시된 기간 존재

    - 커뮤니케이션 다이어그램: 동작에 참여하는 객체들이 주고받는 메시지/객체 연관관계 표현
    - 상태 다이어그램: 하나의 객체가 자신이 속한 클래스의 상태가 어떻게 변화는지 표현
                   럼바우 객체지향 분석기법에서 동적 모델링에 활용
    - 활동 다이어그램: 시스템이 어떤 기능을 수행하는지 처리로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현
    - 상호작용 다이어그램: 상호작용 다이어그램 간의 제어흐름 표현
    - 타이밍 다이어그램: 객체 상태변화 / 시간제약 표현

컴포넌트 기반 방법론(CBD)
    - 컴포넌트를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론
      재사용이 가능하여 시간/노력 절감 가능

CASE(Computer Aided Software Engineering)
    - 소프트웨어 개발 과정에서 사용되는 요구분석, 설계, 구현 등의 과정 전체 또는 일부를
      컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 것

LOC(source Line Of Code)기법
    - 각 기능의 원시코드라인수의 비관치, 낙관치, 기대치를 측정하여 비용을 산정하는 기법
    - 개발기간 * 투입인원 = LOC / 1인당 월평균 생산코드 라인 수

COCOMO(COnstructive Cost MOdel) 모형
    - LOC에 의한 비용 산정 기법
    - 5만라인 이하: Organic Mode(조직형)
      30만라인 이하: Semi-Detached mode(반분리형)
      30만라인 이상: Embedded(내장형)

Putnam 모형
    - 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 예상하는 모형
    - Rayleigh-Norden 곡선의 노력분포도를 기초

CPM(Critical Path Method)
    - 작업을 나열하고 작업에 필요한 소요 기간을 예측하는데 사용되는 기법
    - 노드와 관선으로 구성된 네트워크는 작업 사이의 전후 의존관계를 나타냄.

SPICE(Software Process Improvement and Capability dEtermination)
    - 소프트웨어의 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가 및 개선하는 국제표준
    - ISO/IEC 15504

소프트웨어 개발 프레임워크
    - Framework는 소프트웨어 개발에 공통적으로사용되는 구성요소와 아키텍쳐를 일반화하여
      제공해주는 반 제품 형태의 소프트웨어 시스템
    ㄱ. 모듈화 - 캡슐화를 통한 모듈화
    ㄴ. 재사용성 - 재사용 가능한 모듈 제공
    ㄷ. 확장성 - 다형성을 통한 인터페이스 확장
    ㄹ. 제어의 역흐름 - 객체 제어를 프레임워크에 넘김
